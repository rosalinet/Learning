#These notes reflect LinkedIn's "Linux: Bash SHell and Scripts" course by Kevin Dankwardt

Intro to Bash Scripting ---------- CHAPTER ONE
  How to find info: man pages, info pages, web searches, reference manual
   man bash | wc -l (lists wordcount)
   info bash (interactive bash manual, can search with s, help with h, menu with m, ...)
   gnu.org website has shell scripts and other useful info on bash
  Script File Basics: 
    #! ("shebang") ALWAYS first 2 characters, kernel executes the program that follows via kernel system execve() 
    path to Bash or env: (ALWAYS include path to shell, you can't depend on the default interpreter to always be what you want)
      - Note: without a path to the shell, the script will show the command as "bash" instead of "myscript.sh"
      #!/usr/bin/env bash
      #!/bin/bash (also acceptable & most common)
    ./myscript.sh with #!/bin/bash would have the kernel execute /bin/bash ./myscript.sh
    Perl, Python, Expect, awk, and Bash can use #!
    - Scripts need to be made executable (chmod +x)
      - With read permissions (not execute), you can still run the script with bash thescript.sh (must be interpreted by another command, can't be ran by ./thescript.sh like someone who COULD execute it would)
    - It's good practice to end a script with .sh (common and informative)
  
    Built-In Time Command:
    - Bash has a built-in time command to report how much time a process consumes.
      ex: time find / -name core (find / -name core IS THE COMMAND BEING MEASURED)
      - Output: 3 variants
        real - how long it took in real-time (like with a stopwatch)
        user - CPU time or instructions in the program itself
        sys - CPU time or instruction in the operating system in the kernel doing something for that process
    
    Variable in Bash:
    - Variables in bash are given a value with =
      - You should put no spaces before or after the =; special charcaters and spaces in values should be enclosed in quotations.
      ex: myvar="spaces and extra chars; *# $"
      - You do not need to specify the variable type, just assign it
      - Remove variables with the unset command
      - To get the value/reference the value, use the $ sign
      ex: echo myvar is $myvar (myvar is the NAME of the variable, $myvar is the VALUE)
    - Your shell keeps variables in 2 areas: environment (exported variables) are copied to new processes/new shells that you run.
      - For a shell script to get a COPY (NOT SHARED) of a shell variable, it needs to be "exported":
        export mynewvar or declare -x mynewvar
      - You can export and assign in the same statement:
        export var2="var2 value"
      - UNEXPORT with export -n mynewvar or unset mynewvar
    
    Functions in Bash:
    - You can make them inheritable/visible/part of your environment with export -f myfunc (visible to other shells)
      - Using export will show what things have been exported
    Bash functions use parentheses and brackets to group things together:
      ex: a=1 (a=2) The parentheses holds a new copy of a. If we echo $a after the closed parenthesis, the value is 1.
      - Grouping things with brackets does NOT start a new process.
      ex: a=1 {a=2} Using echo $a NOW will print a value of 2.
      - Bash functions define the body of the function using braces, not parentheses.
    To get a list of the built-in things, you can use the enable command (you can also DISABLE)
    Bash prefers builtins, keywords, aliases, and functions over commands in the file system (It'll look at those first)
    - You can start a new shell by running bash (You'll need to exit to go back to the first one)
    To look at KEYWORDS in Bash, you run compgen -k
    
    Bash Startup:
    .bash_profile is read when Bash is invoked as a login shell (usually setting an environment variable, keeps it consistent)
    .bashrc is executed EVERY time a new shell is started (with an exported variable here, it will grow with each nested shell)
      - You would also setup aliases in the .bashrc
    PATH=$PATH:/usr/local/bin This would keep adding /usr/local/bin to the end of PATH within nested shells.
      This concatenates the value $PATH to a :/usr/local/bin
    - Aliases and functions s hould be normally defines in .bashrc (things that don't grow/are not dynamic)
    
    Sourcing and Aliasing Scripts:
    You can source a script by running source example.sh or . example.sh (dot space)
    - Sourcing a script - the current shell interprets the commands inside the source script as if they were done themselves.
    - Sourcing is a common way to import variable assignments or functions
    - Sourcing makes it so that you are DOING a script in your own shell.
    - You can source a variable even if the variable is assigned another value already.
    The alias command allows for short COMMAND alternatives: alias ll="ls -l"
      - Just typing alias will list all the defined aliases in your shell.
      - Unset an alias with the unalias command
      - Aliases won't be used in pathnames
    
    Echo Command:
    - Common flags:
      -n don't print a trailing newline
      -e ENABLE backslash to escaped characters like \n and \t
      -E DISABLE backslash escaped characters in case they were enabled by default
    - Echo is helpful for file globbing to expand out the names of things.
      - ex: ls * (shows contents of directory) vs echo * (shows the names)
    - File redirection to send output to other files like stderr: 
      echo 'Warning Will Robinson!' >&2 (send standard output to file #2, which is standard error; used to print error messages)
    
    
Variables, Control Structures, and Arithmetic ---------- CHAPTER TWO
  Local variables are created within functions and cannot be accessed outside of the function. 
  It's good practice to DECLARE them local by usign the typeset command.
    ex typeset -i x (x must be an integer)
    - Arithemtic is faster for variables defined to be integers.
    - The let command allows for convenient arithmetic
  BASH also has a declare command where you can declare different features like -l to convert uppercase to lowercase.
    -u does the opposite (lower to upper) 
    -r makes a variable read-only (static)
    -a (integer index) or -A (string, similar to a dict) can change the way an array is indexed
    
  The Read command lets you read input/stdinput into variables.
    - It breaks up the input based on whitespace.
    - ex: read a b = first word goes into a and the rest into b
    - Read is convenient for while loops
  While loops consist of a while, do, and done section.
    - while is the condition, do is the action to be taken while the condition is satisfied
    - The done command leaves the while loop once the condition is satisfied.
    
    
    
