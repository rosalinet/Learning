#These notes reflect LinkedIn's "Linux: Bash SHell and Scripts" course by Kevin Dankwardt

Intro to Bash Scripting ----------
  How to find info: man pages, info pages, web searches, reference manual
   man bash | wc -l (lists wordcount)
   info bash (interactive bash manual, can search with s, help with h, menu with m, ...)
   gnu.org website has shell scripts and other useful info on bash
  Script File Basics: 
    #! ("shebang") ALWAYS first 2 characters, kernel executes the program that follows via kernel system execve() 
    path to Bash or env: (ALWAYS include path to shell, you can't depend on the default interpreter to always be what you want)
      - Note: without a path to the shell, the script will show the command as "bash" instead of "myscript.sh"
      #!/usr/bin/env bash
      #!/bin/bash (also acceptable & most common)
    ./myscript.sh with #!/bin/bash would have the kernel execute /bin/bash ./myscript.sh
    Perl, Python, Expect, awk, and Bash can use #!
    - Scripts need to be made executable (chmod +x)
      - With read permissions (not execute), you can still run the script with bash thescript.sh (must be interpreted by another command, can't be ran by ./thescript.sh like someone who COULD execute it would)
    - It's good practice to end a script with .sh (common and informative)
  
    Built-In Time Command:
    - Bash has a built-in time command to report how much time a process consumes.
      ex: time find / -name core (find / -name core IS THE COMMAND BEING MEASURED)
      - Output: 3 variants
        real - how long it took in real-time (like with a stopwatch)
        user - CPU time or instructions in the program itself
        sys - CPU time or instruction in the operating system in the kernel doing something for that process
    Variable in Bash:
    - Variables in bash are given a value with =
      - You should put no spaces before or after the =; special charcaters and spaces in values should be enclosed in quotations.
      ex: myvar="spaces and extra chars; *# $"
      - You do not need to specify the variable type, just assign it
      - Remove variables with the unset command
      - To get the value/reference the value, use the $ sign
      ex: echo myvar is $myvar (myvar is the NAME of the variable, $myvar is the VALUE)
    - Your shell keeps variables in 2 areas: environment (exported variables) are copied to new processes/new shells that you run.
      - For a shell script to get a COPY (NOT SHARED) of a shell variable, it needs to be "exported":
        export mynewvar or declare -x mynewvar
      - You can export and assign in the same statement:
        export var2="var2 value"
    Functions in Bash:
    - You can make them inheritable/visible/part of your environment with export -f myfunc
      - Using export will show what things have been exported
    Bash functions use parentheses and brackets to group things together:
      ex: a=1 (a=2) The parentheses holds a new copy of a. If we echo $a after the closed parenthesis, the value is 1.
      - Grouping things with brackets does NOT start a new process.
      ex: a=1 {a=2} Using echo $a NOW will print a value of 2.
      - Bash functions define the body of the function using braces, not parentheses.
    To get a list of the built-in things, you can use the enable command (you can also DISABLE)
    Bash prefers builtins, keywords, aliases, and functions over commands in the file system
